/*
 * SPDX-FileCopyrightText: 2006-2021 Istituto Italiano di Tecnologia (IIT)
 * SPDX-License-Identifier: BSD-3-Clause
 */

// Autogenerated by Thrift Compiler (0.14.1-yarped)
//
// This is an automatically generated file.
// It could get re-generated if the ALLOW_IDL_GENERATION flag is on.

#include <yarp/dev/Map2DLocationData.h>

namespace yarp::dev {

// Constructor with field values
Map2DLocationData::Map2DLocationData(const std::string& map_id,
                                     const double x,
                                     const double y,
                                     const double theta,
                                     const std::string& description) :
        WirePortable(),
        map_id(map_id),
        x(x),
        y(y),
        theta(theta),
        description(description)
{
}

// Read structure on a Wire
bool Map2DLocationData::read(yarp::os::idl::WireReader& reader)
{
    if (!read_map_id(reader)) {
        return false;
    }
    if (!read_x(reader)) {
        return false;
    }
    if (!read_y(reader)) {
        return false;
    }
    if (!read_theta(reader)) {
        return false;
    }
    if (!read_description(reader)) {
        return false;
    }
    if (reader.isError()) {
        return false;
    }
    return true;
}

// Read structure on a Connection
bool Map2DLocationData::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListHeader(5)) {
        return false;
    }
    if (!read(reader)) {
        return false;
    }
    return true;
}

// Write structure on a Wire
bool Map2DLocationData::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!write_map_id(writer)) {
        return false;
    }
    if (!write_x(writer)) {
        return false;
    }
    if (!write_y(writer)) {
        return false;
    }
    if (!write_theta(writer)) {
        return false;
    }
    if (!write_description(writer)) {
        return false;
    }
    if (writer.isError()) {
        return false;
    }
    return true;
}

// Write structure on a Connection
bool Map2DLocationData::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(5)) {
        return false;
    }
    if (!write(writer)) {
        return false;
    }
    return true;
}

// Convert to a printable string
std::string Map2DLocationData::toString() const
{
    yarp::os::Bottle b;
    if (!yarp::os::Portable::copyPortable(*this, b)) {
        return {};
    }
    return b.toString();
}

// read map_id field
bool Map2DLocationData::read_map_id(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readString(map_id)) {
        reader.fail();
        return false;
    }
    return true;
}

// write map_id field
bool Map2DLocationData::write_map_id(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeString(map_id)) {
        return false;
    }
    return true;
}

// read (nested) map_id field
bool Map2DLocationData::nested_read_map_id(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readString(map_id)) {
        reader.fail();
        return false;
    }
    return true;
}

// write (nested) map_id field
bool Map2DLocationData::nested_write_map_id(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeString(map_id)) {
        return false;
    }
    return true;
}

// read x field
bool Map2DLocationData::read_x(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readFloat64(x)) {
        reader.fail();
        return false;
    }
    return true;
}

// write x field
bool Map2DLocationData::write_x(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeFloat64(x)) {
        return false;
    }
    return true;
}

// read (nested) x field
bool Map2DLocationData::nested_read_x(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readFloat64(x)) {
        reader.fail();
        return false;
    }
    return true;
}

// write (nested) x field
bool Map2DLocationData::nested_write_x(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeFloat64(x)) {
        return false;
    }
    return true;
}

// read y field
bool Map2DLocationData::read_y(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readFloat64(y)) {
        reader.fail();
        return false;
    }
    return true;
}

// write y field
bool Map2DLocationData::write_y(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeFloat64(y)) {
        return false;
    }
    return true;
}

// read (nested) y field
bool Map2DLocationData::nested_read_y(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readFloat64(y)) {
        reader.fail();
        return false;
    }
    return true;
}

// write (nested) y field
bool Map2DLocationData::nested_write_y(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeFloat64(y)) {
        return false;
    }
    return true;
}

// read theta field
bool Map2DLocationData::read_theta(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readFloat64(theta)) {
        reader.fail();
        return false;
    }
    return true;
}

// write theta field
bool Map2DLocationData::write_theta(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeFloat64(theta)) {
        return false;
    }
    return true;
}

// read (nested) theta field
bool Map2DLocationData::nested_read_theta(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readFloat64(theta)) {
        reader.fail();
        return false;
    }
    return true;
}

// write (nested) theta field
bool Map2DLocationData::nested_write_theta(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeFloat64(theta)) {
        return false;
    }
    return true;
}

// read description field
bool Map2DLocationData::read_description(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readString(description)) {
        reader.fail();
        return false;
    }
    return true;
}

// write description field
bool Map2DLocationData::write_description(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeString(description)) {
        return false;
    }
    return true;
}

// read (nested) description field
bool Map2DLocationData::nested_read_description(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readString(description)) {
        reader.fail();
        return false;
    }
    return true;
}

// write (nested) description field
bool Map2DLocationData::nested_write_description(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeString(description)) {
        return false;
    }
    return true;
}

} // namespace yarp::dev
